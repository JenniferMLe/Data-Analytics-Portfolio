# Define server function
server <- function(input, output) {
output$txtout <- renderText({
paste( input$txt1, input$txt2, sep = " " )
})
output$table <- DT::renderDataTable(DT::datatable({
data <- select(df, Class, Question, Percentage_or_Mean,
Location, Age_Group, Gender_or_Race)
data
}))
} # server
# Create Shiny object
shinyApp(ui = ui, server = server)
dashboard1 <-
tabPanel(
"Data Exploration",
sidebarLayout(
sidebarPanel(
# tags$h3("Input:"),
# textInput("txt1", "Given Name:", ""),
# textInput("txt2", "Surname:", ""),
column(12,
selectInput(
"Class",
"Class:",
c("All",
unique(as.character(df$Class))))
)
),
mainPanel(
DT::dataTableOutput("table"),
verbatimTextOutput("txtout")
), # mainPanel
)
)
dashboard2 <-
tabPanel(
"Dashboard 2",
"This panel is intentionally left blank"
)
# Define UI
ui <- fluidPage(
theme = shinytheme("cerulean"),
navbarPage(
"Old Population Health Data Analysis",
dashboard1,
dashboard2
)
)
# Define server function
server <- function(input, output) {
output$txtout <- renderText({
paste( input$txt1, input$txt2, sep = " " )
})
output$table <- DT::renderDataTable(DT::datatable({
data <- select(df, Class, Question, Percentage_or_Mean,
Location, Age_Group, Gender_or_Race)
data
}))
} # server
# Create Shiny object
shinyApp(ui = ui, server = server)
dashboard1 <-
tabPanel(
"Data Exploration",
sidebarLayout(
sidebarPanel(
# tags$h3("Input:"),
# textInput("txt1", "Given Name:", ""),
# textInput("txt2", "Surname:", ""),
column(12,
selectInput(
"Class",
"Class:",
c("All",unique(as.character(df$Class)))
)
),
column(12,
selectInput(
"Question",
"Question:",
c("All",unique(as.character(df$Question)))
)
),
column(12,
selectInput(
"Location",
"Location:",
c("All",unique(as.character(df$Location)))
)
),
),
mainPanel(
DT::dataTableOutput("table"),
verbatimTextOutput("txtout")
), # mainPanel
)
)
dashboard2 <-
tabPanel(
"Dashboard 2",
"This panel is intentionally left blank"
)
# Define UI
ui <- fluidPage(
theme = shinytheme("cerulean"),
navbarPage(
"Old Population Health Data Analysis",
dashboard1,
dashboard2
)
)
# Define server function
server <- function(input, output) {
output$txtout <- renderText({
paste( input$txt1, input$txt2, sep = " " )
})
output$table <- DT::renderDataTable(DT::datatable({
data <- select(df, Class, Question, Percentage_or_Mean,
Location, Age_Group, Gender_or_Race)
data
}))
} # server
# Create Shiny object
shinyApp(ui = ui, server = server)
dashboard1 <-
tabPanel(
"Data Exploration",
sidebarLayout(
sidebarPanel(
# tags$h3("Input:"),
# textInput("txt1", "Given Name:", ""),
# textInput("txt2", "Surname:", ""),
column(12,
selectInput(
"Class",
"Class:",
c("All",unique(as.character(df$Class)))
)
),
column(12,
selectInput(
"Question",
"Question:",
c("All",unique(as.character(df$Question)))
)
),
column(12,
selectInput(
"Location",
"Location:",
c("All",unique(as.character(df$Location)))
)
),
column(12,
selectInput(
"Age Group",
"Age Group:",
c("All",unique(as.character(df$Age_Group)))
)
),
),
column(12,
selectInput(
"Gender or Race",
"Gender or Race:",
c("All",unique(as.character(df$Gender_or_Race)))
)
),
),
mainPanel(
DT::dataTableOutput("table"),
verbatimTextOutput("txtout")
)
)
dashboard2 <-
tabPanel(
"Dashboard 2",
"This panel is intentionally left blank"
)
# Define UI
ui <- fluidPage(
theme = shinytheme("cerulean"),
navbarPage(
"Old Population Health Data Analysis",
dashboard1,
dashboard2
)
)
# Define server function
server <- function(input, output) {
output$txtout <- renderText({
paste( input$txt1, input$txt2, sep = " " )
})
output$table <- DT::renderDataTable(DT::datatable({
data <- select(df, Class, Question, Percentage_or_Mean,
Location, Age_Group, Gender_or_Race)
data
}))
} # server
# Create Shiny object
shinyApp(ui = ui, server = server)
dashboard1 <-
tabPanel(
"Data Exploration",
sidebarLayout(
sidebarPanel(
# tags$h3("Input:"),
# textInput("txt1", "Given Name:", ""),
# textInput("txt2", "Surname:", ""),
column(12,
selectInput(
"Class",
"Class:",
c("All",unique(as.character(df$Class)))
)
),
column(12,
selectInput(
"Question",
"Question:",
c("All",unique(as.character(df$Question)))
)
),
column(12,
selectInput(
"Location",
"Location:",
c("All",unique(as.character(df$Location)))
)
),
column(12,
selectInput(
"Age Group",
"Age Group:",
c("All",unique(as.character(df$Age_Group)))
)
),
),
column(12,
selectInput(
"Gender or Race",
"Gender or Race:",
c("All",unique(as.character(df$Gender_or_Race)))
)
),
mainPanel(
DT::dataTableOutput("table"),
verbatimTextOutput("txtout")
)
)
)
dashboard1 <-
tabPanel(
"Data Exploration",
sidebarLayout(
sidebarPanel(
# tags$h3("Input:"),
# textInput("txt1", "Given Name:", ""),
# textInput("txt2", "Surname:", ""),
column(12,
selectInput(
"Class",
"Class:",
c("All",unique(as.character(df$Class)))
)
),
column(12,
selectInput(
"Question",
"Question:",
c("All",unique(as.character(df$Question)))
)
),
column(12,
selectInput(
"Location",
"Location:",
c("All",unique(as.character(df$Location)))
)
),
column(12,
selectInput(
"Age Group",
"Age Group:",
c("All",unique(as.character(df$Age_Group)))
)
),
column(12,
selectInput(
"Gender or Race",
"Gender or Race:",
c("All",unique(as.character(df$Gender_or_Race)))
)
)
),
mainPanel(
DT::dataTableOutput("table"),
verbatimTextOutput("txtout")
)
)
)
dashboard2 <-
tabPanel(
"Dashboard 2",
"This panel is intentionally left blank"
)
# Define UI
ui <- fluidPage(
theme = shinytheme("cerulean"),
navbarPage(
"Old Population Health Data Analysis",
dashboard1,
dashboard2
)
)
# Define server function
server <- function(input, output) {
output$txtout <- renderText({
paste( input$txt1, input$txt2, sep = " " )
})
output$table <- DT::renderDataTable(DT::datatable({
data <- select(df, Class, Question, Percentage_or_Mean,
Location, Age_Group, Gender_or_Race)
data
}))
} # server
# Create Shiny object
shinyApp(ui = ui, server = server)
source("~/Downloads/Github/Health of Elderly Population/app.R")
# Create Shiny object
shinyApp(ui = ui, server = server)
create_filter <- function(label, column) {
return(
column(12,
selectInput(
label,
paste(label,':',sep=""),
c("All",unique(as.character(column)))
)
)
)
}
dashboard1 <-
tabPanel(
"Data Exploration",
sidebarLayout(
sidebarPanel(
# tags$h3("Input:"),
# textInput("txt1", "Given Name:", ""),
# textInput("txt2", "Surname:", ""),
create_filter("Class", df$Class),
column(12,
selectInput(
"Question",
"Question:",
c("All",unique(as.character(df$Question)))
)
),
column(12,
selectInput(
"Location",
"Location:",
c("All",unique(as.character(df$Location)))
)
),
column(12,
selectInput(
"Age Group",
"Age Group:",
c("All",unique(as.character(df$Age_Group)))
)
),
column(12,
selectInput(
"Gender or Race",
"Gender or Race:",
c("All",unique(as.character(df$Gender_or_Race)))
)
)
),
mainPanel(
DT::dataTableOutput("table"),
verbatimTextOutput("txtout")
)
)
)
dashboard2 <-
tabPanel(
"Dashboard 2",
"This panel is intentionally left blank"
)
# Define UI
ui <- fluidPage(
theme = shinytheme("cerulean"),
navbarPage(
"Old Population Health Data Analysis",
dashboard1,
dashboard2
)
)
# Define server function
server <- function(input, output) {
output$txtout <- renderText({
paste( input$txt1, input$txt2, sep = " " )
})
output$table <- DT::renderDataTable(DT::datatable({
data <- select(df, Class, Question, Percentage_or_Mean,
Location, Age_Group, Gender_or_Race)
data
}))
} # server
# Create Shiny object
shinyApp(ui = ui, server = server)
create_filter <- function(label, column) {
return(
column(12,
selectInput(
label,
paste(label,':',sep=""),
c("All",unique(as.character(column)))
)
)
)
}
dashboard1 <-
tabPanel(
"Data Exploration",
sidebarLayout(
sidebarPanel(
create_filter("Class", df$Class),
create_filter("Question", df$Question),
create_filter("Location", df$Location),
create_filter("Age Group", df$Age_Group),
create_filter("Gender or Race", df$Gender_or_Race)
),
mainPanel(
DT::dataTableOutput("table")
)
)
)
dashboard2 <-
tabPanel(
"Dashboard 2",
"This panel is intentionally left blank"
)
# Define UI
ui <- fluidPage(
theme = shinytheme("cerulean"),
navbarPage(
"Old Population Health Data Analysis",
dashboard1,
dashboard2
)
)
# Define server function
server <- function(input, output) {
output$txtout <- renderText({
paste( input$txt1, input$txt2, sep = " " )
})
output$table <- DT::renderDataTable(DT::datatable({
data <- select(df, Class, Question, Percentage_or_Mean,
Location, Age_Group, Gender_or_Race)
data
}))
} # server
# Create Shiny object
shinyApp(ui = ui, server = server)
source("~/Downloads/Github/Health of Elderly Population/app.R")
# Define server function
server <- function(input, output) {
output$txtout <- renderText({
paste( input$txt1, input$txt2, sep = " " )
})
output$table <- DT::renderDataTable(DT::datatable({
data <- select(df, Class, Question, Percentage_or_Mean,
Location, Age_Group, Gender_or_Race)
if (input$Class != "All") {
data <- data[data$Class == input$Class,]
}
data
}))
} # server
# Create Shiny object
shinyApp(ui = ui, server = server)
server <- function(input, output) {
output$txtout <- renderText({
paste( input$txt1, input$txt2, sep = " " )
})
output$table <- DT::renderDataTable(DT::datatable({
data <- select(df, Class, Question, Percentage_or_Mean,
Location, Age_Group, Gender_or_Race)
if (input$Class != "All") {
data <- data[data$Class == input$Class,]
}
if (input$Question != "All") {
data <- data[data$Question == input$Question]
}
if (input$Location != "All") {
data <- data[data$Location == input$Location]
}
if (input$'Age Group' != "All") {
data <- data[data$Age_Group == input$'Age Group']
}
if (input$'Gender or Race' != "All") {
data <- data[data$'Gender or Race' == input$'Gender or Race']
}
data
}))
} # server
# Create Shiny object
shinyApp(ui = ui, server = server)
